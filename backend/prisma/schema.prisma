generator client {
  provider = "prisma-client-js"
  output   = "../shared-types/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  firstName  String?
  lastName   String?
  email      String   @unique
  password   String
  role       Role     @default(USER)
  profilePic String?
  createdAt  DateTime @default(now())
  avatar String @default("/avatars/1.png")

  groups       GroupMember[]
  observations Observation[]
  events       EventParticipant[]
  tasks        Task[]
  Image        Image[]
  Article      Article[]
  Event        Event[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Image {
  id        String        @id @default(uuid())
  url       String
  title     String?
  category  ImageCategory
  createdAt DateTime      @default(now())

  userId String? // Uploader (optional)
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  groupId String? // Group images
  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  observationId String? // Observation images
  observation   Observation? @relation(fields: [observationId], references: [id], onDelete: Cascade)

  eventId String? // Event images
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("images")
}

enum ImageCategory {
  GROUP
  OBSERVATION
  EVENT
  OTHER
}

model Article {
  id        String   @id @default(uuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("articles")
}

// status of the group
enum GroupStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  PENDING
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  image String @default("/images/groups/rover.jpg")
  // add the status to the group
  status GroupStatus @default(ACTIVE)
  // add the rating to the group
  rating Int @default(0)
  members GroupMember[]
  images  Image[]

  @@map("groups")
}

model GroupMember {
  id       String    @id @default(uuid())
  userId   String
  groupId  String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  @@map("group_members")
}

enum GroupRole {
  MEMBER
  ADMIN
}

model Observation {
  id       String   @id @default(uuid())
  title    String
  details  String?
  location String?
  date     DateTime
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images   Image[]

  @@map("observations")
}

model Event {
  id           String             @id @default(uuid())
  title        String
  description  String?
  location     String?
  requirements String?
  date         DateTime
  type         EventType         @default(MEETING)
  createdById  String
  createdBy    User               @relation(fields: [createdById], references: [id], onDelete: Cascade)
  images       Image[]
  participants EventParticipant[]

  @@map("events")
}

model EventParticipant {
  id      String @id @default(uuid())
  eventId String
  userId  String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("event_participants")
}

model Task {
  id           String     @id @default(uuid())
  title        String
  description  String?
  assignedToId String
  assignedTo   User       @relation(fields: [assignedToId], references: [id], onDelete: Cascade)
  status       TaskStatus @default(PENDING)
  createdAt    DateTime   @default(now())

  @@map("tasks")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum EventType {
  ECLIPSE          // Solar or lunar eclipse
  MOON            // Full moon new moon supermoon etc.
  METEOR_SHOWER   // Meteor showers like Perseids Geminids etc.
  PLANETARY       // Planet conjunctions oppositions transits
  COMET           // Comet appearances
  STAR            // Supernova nova variable star events
  SOLSTICE        // Summer and winter solstices
  EQUINOX         // Spring and autumn equinoxes
  AURORA          // Aurora borealis (Northern Lights) and aurora australis
  OCCULTATION     // One celestial object passing in front of another
  CONJUNCTION     // Close apparent approach of two or more celestial bodies
  TRANSIT         // A planet passing in front of a star or the Sun
  BLUE_MOON      // Second full moon in a calendar month
  BLOOD_MOON     // Total lunar eclipse
  HARVEST_MOON   // Full moon closest to the autumn equinox
  SUPERMOON      // Full moon at perigee
  MICROMOON      // Full moon at apogee
  MEETING        // Regular meetings
  WORKSHOP       // Workshops
}
